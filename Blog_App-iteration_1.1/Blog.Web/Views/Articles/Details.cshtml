@model Blog.Infrastructure.Entities.Article

@{
    ViewData["Title"] = Model.Title;
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <article class="article-content">
                <header class="mb-4">
                    <h1 class="display-4">@Model.Title</h1>
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="article-meta">
                            <span class="text-muted">
                                <i class="bi bi-person"></i> @Model.User?.UserName
                                <span class="mx-2">â€¢</span>
                                <i class="bi bi-calendar"></i> @Model.PublishedAt?.ToString("MMMM dd, yyyy")
                            </span>
                        </div>
                        <div class="article-votes">
                            @if (User.Identity.IsAuthenticated)
                            {
                                @if (ViewBag.UserCanVoteArticles)
                                {
                                    <form id="antiForgeryForm">
                                        @Html.AntiForgeryToken()
                                    </form>
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-outline-success @(ViewBag.UserVote?.IsUpvote == true ? "active" : "")"
                                                onclick="voteArticle(@Model.Id, true)">
                                            <i class="bi bi-hand-thumbs-up"></i> @Model.UpvoteCount
                                        </button>
                                        <button type="button" class="btn btn-outline-danger @(ViewBag.UserVote?.IsUpvote == false ? "active" : "")"
                                                onclick="voteArticle(@Model.Id, false)">
                                            <i class="bi bi-hand-thumbs-down"></i> @Model.DownvoteCount
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-muted">
                                        <i class="bi bi-lock"></i> You need permission to vote on articles
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-muted">
                                    <i class="bi bi-person"></i> Please log in to vote
                                </div>
                            }
                            <span class="badge rounded-pill @(Model.Score > 0 ? "bg-success" : (Model.Score < 0 ? "bg-danger" : "bg-secondary")) ms-2">
                                Score: @Model.Score
                            </span>
                        </div>
                    </div>
                </header>

                @if (!string.IsNullOrEmpty(Model.FeaturedImage))
                {
                    <div class="featured-image mb-4">
                        <img src="@Model.FeaturedImage" class="img-fluid rounded" alt="@Model.Title">
                    </div>
                }

                <div class="article-body">
                    @Html.Raw(Model.Content)
                </div>
            </article>

            @if (User.Identity.IsAuthenticated && 
                (Model.UserId == UserManager.GetUserId(User) || 
                 User.IsInRole("Administrator")))
            {
                <div class="mt-4">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">
                        <i class="bi bi-trash"></i> Delete
                    </a>
                </div>
            }
            
            <!-- Comments Section -->
            @{
                ViewBag.ArticleId = Model.Id;
            }
            <partial name="_CommentsPartial" />
            <!-- End Comments Section -->
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <style>
        .article-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .featured-image img {
            max-height: 500px;
            width: 100%;
            object-fit: cover;
        }

        .article-body {
            font-size: 1.1rem;
            line-height: 1.8;
        }

        .article-votes {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-group .btn {
            padding: 0.375rem 0.75rem;
        }

        .btn-group .btn.active {
            color: white;
        }
    </style>
}
@section Scripts {
    <!-- jQuery first -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    
    <!-- SignalR -->
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    
    <!-- API Endpoints -->
    <script src="~/js/apiEndpoints.js"></script>
    
    <!-- Comment constants -->
    <script src="~/js/commentConstants.js"></script>
    
    <!-- Comment script -->
    <script src="~/js/comments.js"></script>

    <script>
        // Vote functionality
        function voteArticle(articleId, isUpvote) {
            const token = document.querySelector("#antiForgeryForm input[name='__RequestVerificationToken']").value;
            
            fetch(API_ENDPOINTS.ARTICLE_VOTES.VOTE, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ articleId, isUpvote })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || 'Failed to process vote');
                    });
                }
                return response.json();
            })
            .then(data => {
                // Update vote counts and score
                const upvoteBtn = document.querySelector('.btn-outline-success');
                const downvoteBtn = document.querySelector('.btn-outline-danger');
                const scoreEl = document.querySelector('.badge');
                
                // Update UI
                upvoteBtn.innerHTML = `<i class="bi bi-hand-thumbs-up"></i> ${data.upvoteCount}`;
                downvoteBtn.innerHTML = `<i class="bi bi-hand-thumbs-down"></i> ${data.downvoteCount}`;
                scoreEl.textContent = `Score: ${data.score}`;
                
                // Update class for score color
                scoreEl.className = `badge rounded-pill ms-2 ${data.score > 0 ? 'bg-success' : (data.score < 0 ? 'bg-danger' : 'bg-secondary')}`;
                
                // Update active state
                upvoteBtn.classList.toggle('active', data.userVote && data.userVote.isUpvote);
                downvoteBtn.classList.toggle('active', data.userVote && !data.userVote.isUpvote);
            })
            .catch(error => {
                console.error('Error:', error);
                alert(error.message);
            });
        }
        
        // Initialize comments with user info
        $(document).ready(function() {
            @{
                var currentUser = await UserManager.GetUserAsync(User);
                var currentUserId = currentUser?.Id ?? string.Empty;
                var canComment = currentUser != null && (currentUser.CanCommentArticles || currentUser.IsAdmin);
                var profilePicture = currentUser?.ProfilePicture ?? "/images/default-profile.jpg";
                // Ensure article ID is a number
                var articleId = ViewBag.ArticleId;
            }
            
            console.log("Initializing comments with article ID: @articleId");
            
            // Check if function is defined before calling
            if (typeof initializeComments === 'function') {
                initializeComments({
                    currentUserId: '@(currentUserId)',
                    canComment: @Json.Serialize(canComment),
                    articleId: @articleId, // Pass as a number, not a string
                    currentUserProfilePicture: '@(profilePicture)'
                });
            } else {
                console.error("initializeComments function is not defined. Check if comments.js is loaded correctly.");
            }
        });
    </script>
}
