@model IEnumerable<Blog.Infrastructure.Entities.PermissionRequest>
@{
    ViewData["Title"] = (bool)ViewBag.IsAdmin ? "Manage Permission Requests" : "My Permission Requests";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">@ViewData["Title"]</h1>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="bi bi-check-circle me-2"></i>
                    @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (TempData["InfoMessage"] != null)
            {
                <div class="alert alert-info alert-dismissible fade show" role="alert">
                    <i class="bi bi-info-circle me-2"></i>
                    @TempData["InfoMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (!ViewBag.IsAdmin)
            {
                <div class="mb-4 d-flex gap-2">
                    @if (!ViewBag.CanWriteArticles)
                    {
                        <a asp-action="Request" asp-route-type="write" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Request Writing Permission
                        </a>
                    }
                    @if (!ViewBag.CanVoteArticles)
                    {
                        <a asp-action="Request" asp-route-type="vote" class="btn btn-success">
                            <i class="bi bi-plus-circle"></i> Request Voting Permission
                        </a>
                    }
                    @if (!ViewBag.CanCommentArticles)
                    {
                        <a asp-action="Request" asp-route-type="comment" class="btn btn-info">
                            <i class="bi bi-plus-circle"></i> Request Comment Permission
                        </a>
                    }
                </div>
            }

            @if (!Model.Any())
            {
                <div class="alert alert-info">
                    @if (ViewBag.IsAdmin)
                    {
                        <p>There are no permission requests to review.</p>
                    }
                    else
                    {
                        <p>You haven't made any permission requests yet.</p>
                    }
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                @if (ViewBag.IsAdmin)
                                {
                                    <th>User</th>
                                }
                                <th>Reason</th>
                                <th>Requested</th>
                                <th>Status</th>
                                <th>Processed By</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var request in Model)
                            {
                                <tr>
                                    @if (ViewBag.IsAdmin)
                                    {
                                        <td>@request.User.UserName</td>
                                    }
                                    <td>@request.Reason</td>
                                    <td>@request.RequestedAt.ToString("MMM dd, yyyy HH:mm")</td>
                                    <td>
                                        @switch (request.Status)
                                        {
                                            case Blog.Infrastructure.Entities.PermissionRequestStatus.Pending:
                                                <span class="badge bg-warning">Pending</span>
                                                break;
                                            case Blog.Infrastructure.Entities.PermissionRequestStatus.Approved:
                                                <span class="badge bg-success">Approved</span>
                                                break;
                                            case Blog.Infrastructure.Entities.PermissionRequestStatus.Rejected:
                                                <span class="badge bg-danger">Rejected</span>
                                                break;
                                        }
                                    </td>
                                    <td>
                                        @if (request.ProcessedByUser != null)
                                        {
                                            @request.ProcessedByUser.UserName
                                        }
                                    </td>
                                    <td>
                                        @if (ViewBag.IsAdmin && request.Status == Blog.Infrastructure.Entities.PermissionRequestStatus.Pending)
                                        {
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-success btn-sm" onclick="approveRequest(@request.Id)">
                                                    <i class="bi bi-check-lg"></i> Approve
                                                </button>
                                                <button type="button" class="btn btn-danger btn-sm" onclick="rejectRequest(@request.Id)">
                                                    <i class="bi bi-x-lg"></i> Reject
                                                </button>
                                            </div>
                                        }
                                        else if (request.Status == Blog.Infrastructure.Entities.PermissionRequestStatus.Rejected && !string.IsNullOrEmpty(request.RejectionReason))
                                        {
                                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="showRejectionReason('@request.RejectionReason')">
                                                <i class="bi bi-info-circle"></i> View Reason
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Rejection Modal -->
<div class="modal fade" id="rejectionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="rejectionForm">
                    <input type="hidden" id="requestId" />
                    <div class="mb-3">
                        <label for="rejectionReason" class="form-label">Reason for Rejection</label>
                        <textarea class="form-control" id="rejectionReason" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="submitRejection()">Reject</button>
            </div>
        </div>
    </div>
</div>

<!-- Rejection Reason Modal -->
<div class="modal fade" id="rejectionReasonModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rejection Reason</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="rejectionReasonText"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let rejectionModal;
        let rejectionReasonModal;

        document.addEventListener('DOMContentLoaded', function() {
            rejectionModal = new bootstrap.Modal(document.getElementById('rejectionModal'));
            rejectionReasonModal = new bootstrap.Modal(document.getElementById('rejectionReasonModal'));
        });

        function approveRequest(id) {
            if (confirm('Are you sure you want to approve this request?')) {
                processRequest(id, true);
            }
        }

        function rejectRequest(id) {
            document.getElementById('requestId').value = id;
            document.getElementById('rejectionReason').value = '';
            rejectionModal.show();
        }

        function submitRejection() {
            const id = document.getElementById('requestId').value;
            const reason = document.getElementById('rejectionReason').value;
            
            if (!reason) {
                alert('Please provide a reason for rejection.');
                return;
            }

            processRequest(id, false, reason);
            rejectionModal.hide();
        }

        function processRequest(id, approved, rejectionReason = null) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Permissions/Process';

            const idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = 'id';
            idInput.value = id;
            form.appendChild(idInput);

            const approvedInput = document.createElement('input');
            approvedInput.type = 'hidden';
            approvedInput.name = 'approved';
            approvedInput.value = approved;
            form.appendChild(approvedInput);

            if (rejectionReason) {
                const reasonInput = document.createElement('input');
                reasonInput.type = 'hidden';
                reasonInput.name = 'rejectionReason';
                reasonInput.value = rejectionReason;
                form.appendChild(reasonInput);
            }

            // Add antiforgery token
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
            form.appendChild(tokenInput);

            document.body.appendChild(form);
            form.submit();
        }

        function showRejectionReason(reason) {
            document.getElementById('rejectionReasonText').textContent = reason;
            rejectionReasonModal.show();
        }
    </script>
}